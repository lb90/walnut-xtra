<HTML>
<HEAD> 
<TITLE>IMoaMmImage</TITLE>
<link href="../xdk.css" rel="stylesheet" type="text/css">
</HEAD>

<body>

<A HREF="../mmdg/index.htm">MM Developer's Guide</A><BR>
<A HREF="index.htm" >MM Interfaces</A> | <A HREF="mmmthndx.htm" >MM Methods</A>
<A HREF="mmtypndx.htm">MM Types and Misc API</A>
<hr width=45% align=left>

<h3><A name = "IMoaMmXValue">IMoaMmImage</A></h3>

Interface ID: <span class="code">IID_IMoaMmImage</span><BR>
Pointer type:<span class="code">PIMoaMmImage</span><BR>
Inheritance: <span class="code">IMoaUnknown</span><BR>
Header file: <a href="../../Include/mmiimage.h">mmiimage.h</a><BR>
  
<h3>Description</h3>

<DL> 
  <DD> This callback interface provides MoaMmImage manipulation functions and 
    support for image object (interface new to Director 8.5). Most of the methods 
    in this inteface have a direct correspondance with the lingo imaging commands. 
    Please see the Director 8.5 documentation for more information about image 
    objects and image methods.</DD>
</DL>

<h3>Constants and Structures</h3>
<DL> 
  <DD> 
    <pre class="code">
typedef struct MoaMmImageInfo
{
	MoaLong iWidth;
	MoaLong iHeight;
	MoaLong iRowBytes;
	MoaLong iTotalDepth;
	MoaLong iAlphaDepth;
	MoaBool bCartesian;

} MoaMmImageInfo, *PMoaMmImageInfo;
</pre>
</DL>
<h3>Methods</h3>

<h4>Image Creation and Information</h4>
<DL> 
  <DD>
    <A HREF = "#NewImage">NewImage()</A> <BR>
    <A HREF = "#Duplicate">Duplicate()</A> <BR>
    <A HREF = "#NewImageFromStream">NewImageFromStream()</A> <BR>
    <A HREF = "#UpdateImageFromStream">UpdateImageFromStream()</A> <BR>
    <A HREF = "#ReleaseProgressCookie">ReleaseProgressCookie()</A> <BR>
    <A HREF = "#NewImageFromPath">NewImageFromPath()</A> <BR>
    <A HREF = "#GetImageInfo">GetImageInfo()</A></DD>
</DL>

<h4>Image Manipulation Methods</h4>
<DL>
<DD>
    <A HREF = "#CopyPixels">CopyPixels()</A> <BR>
	<A HREF = "#Crop">Crop()</A> <BR>
    <A HREF = "#Draw">Draw()</A> <BR>
    <A HREF = "#Fill">Fill()</A> <BR>
    <A HREF = "#CreateMatte">CreateMatte()</A> <BR>
    <A HREF = "#CreateMask">CreateMask()</A> <BR>
    <A HREF = "#TrimWhiteSpace">TrimWhiteSpace()</A> <BR>
    <A HREF = "#SetAlpha">SetAlpha()</A> <BR>
    <A HREF = "#ExtractAlpha">ExtractAlpha()</A> </DD>
</DL>

<h4>Pixel Access Methods</h4>
<DL>
<DD>
    <A HREF = "#GetPixel">GetPixel()</A> <BR>
    <A HREF = "#SetPixel">SetPixel()</A> <BR>
    <A HREF = "#GetPixellnteger">GetPixelInteger()</A> <BR>
    <A HREF = "#SetPixelInteger">SetPixelInteger()</A> <BR>
    <A HREF = "#LockPixels">LockPixels()</A> <BR>
    <A HREF = "#UnlockPixels">UnlockPixels()</A> </DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="NewImage">NewImage()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">NewImage(MoaLong <I>iWidth</I>, MoaLong <i>iHeight</i>, MoaLong <i>iBitDepth</i>, 
  MoaLong <i>iAlphaDepth</i>,<BR>&nbsp;&nbsp;
PMoaMmValue <I>pPaletteRef</I>, PMoaMmValue <I>pResultImage</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT class="codearg">iWidth</DT>
  <DD>The width of the new image.</DD>
  <DT class="codearg">iHeight</DT>
  <DD>The height of the new image.</DD>
  <DT class="codearg">iBitDepth</DT>
  <DD>The bit depth of the new image.</DD>
  <DT class="codearg">iAlphaDepth</DT>
  <DD>The alpha channel depth of the new image.</DD>
  <DT class="codearg">pPaletteRef</DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains a member reference for a palette member. Use
  NULL for a missing palette reference. The movie default palette is used.</DD>
  <DT class="codearg">pResultImage</DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that will receive the new image object.</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD> Creates a lingo image object based upon the passed in parameters.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="Duplicate">Duplicate()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">Duplicate(ConstPMoaMmValue <I>pSourceImage</I>, PMoaMmValue <I>pResultImage</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT class="codearg">pSourceImage</DT>
  <DD>Pointer to a <span class="code">MmValue</span> that contains the source image object</DD>
  <DT class="codearg">pResultImage</DT>
  <DD>Pointer to a <span class="code">MmValue</span> that will receive the destination image object</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD> Creates a copy of a lingo image object. This does not work on mask items.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="NewImageFromStream">NewImageFromStream()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">NewImageFromStream(PIMoaStream <I>pStream</I>, PPMoaVoid <I>pProgressCookie</I>,
  PMoaMmValue <I>pResultImage</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT><span class="code"><i>pStream</i></span></DT>
  <DD>Pointer to an open Moa stream that references a file with image data.</DD>
  <DT><span class="code"><i>pProgressCookie</i></span></DT> 
  <DD>Pass NULL for pProgressCookie if all data is available in the stream. Otherwise 
    pass in the address of a pointer that will be used to store a cookie.</DD>
  <DT><span class="code"><i>pResultImage</i></span></DT>
  <DD>Pointer to a <span class="code">MmValue</span> that will receive the destination image object</DD> 
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD> Takes an open PIMoaStream and reads (and parses) an image from a file format. 
    If pProgressCookie is non-NULL, a cookie is allocated and can be passed in 
    to <span class="code">UpdateImageFromStream</span>. In this case <span class="code">ReleaseProgressCookie</span> 
    must be called to deallocate the cookie.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="UpdateImageFromStream">UpdateImageFromStream()</A></h3>

<h4>Syntax</h4>

<DL> 
  <DT class="code">UpdateImageFromStream(PIMoaStream <I>pStream</I>, 
  PMoaVoid <I>pProgressCookie</I>, PMoaMmValue <I>pUpdateImage</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT><span class="code"><i>pStream</i></span></DT>
  <DD>Pointer to the open Moa stream that references a file with image data.</DD>
  <DT><span class="code"><i>pProgressCookie</i></span></DT> 
  <DD>The cookie for this stream.</DD>
  <DT><span class="code"><i>pUpdateImage</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that is in the process of receiving the image object</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD> Called when an image object is being streamed in from a file.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="ReleaseProgressCookie">ReleaseProgressCookie()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">ReleaseProgressCookie(PPMoaVoid<I> pProgressCookie</I>)</DT> 
</DL>
<h4>Parameters</h4>
<DL>
  <DT class="codearg">pProgressCookie</DT> 
  <DD>The cookie to be released.</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span></DD>
</DL>
<h4>Description</h4>
<DL> 
  <DD> Called to release the cookie that was allocated by <span class="code">NewImageFromStream</span>.</DD> 
</DL>

<hr width=45% align=left>

<h3><A NAME="NewImageFromPath">NewImageFromPath()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">NewImageFromPath(PIMoaPathName <I>pMoaPath</I>, PMoaMmValue <I>pResultImage</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT class="codearg">pMoaPath</DT>
  <DD>Pointer to a file that contains image data.</DD>
  <DT class="codearg">pResultImage</DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that will receive the image object</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span></DD>
</DL>
<h4>Description</h4>
<DL> 
  <DD> Takes a PIMoaPathName and opens and reads (and parses) an image from a file.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="GetImageInfo">GetImageInfo()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">GetImageInfo(ConstPMoaMmValue <I>pImage</I>, PMoaMmImageInfo <I>pImageInfo</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT><span class="code"><i>pImage</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains an image object.</DD>
  <DT><span class="code"><i>pImageInfo</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmImageInfo</span> structure that will be filled with 
    the information about the passed in image.</DD>  
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">kMoaDrErr_ImageExpected</span> is returned if <span class="codearg">pImage</span> does not reference an image object
</DL>
<h4>Description</h4>
<DL> 
  <DD>Takes a MoaMmValue containing an ImageRef and returns a filled out <span class="code">MoaMmImageInfo</span> structure.
  This routine is the best way to find out if a <span class="code">MoaMmValue</span> contains a reference to an image object/</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="CopyPixels">CopyPixels()</A></h3>

<h4>Syntax</h4>

<DL>
<DT class="code">CopyPixels(ConstPMoaMmValue <I>pImage</I>, ConstPMoaMmValue <I>pSourceImage</I>, 
  ConstPMoaMmValue <I>pDestRectOrQuad</I>,<br>&nbsp;&nbsp;
  ConstPMoaMmValue <I>pSourceRect</I>, ConstPMoaMmValue <I>pPropList</I>)</DT>
</DL>

<h4>Parameters</h4>

<DL>
  <DT><span class="code"><i>pImage</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains the destination image object</DD>
  <DT><span class="code"><i>pSourceImage</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains the source image object</DD>
  <DT><span class="code"><i>pDestRectOrQuad</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains the destination rectangle or quad for the copy</DD>
  <DT><span class="code"><i>pSourceRect</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains the source rectangle</DD>
  <DT><span class="code"><i>pPropList</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains a property list with various 
    parameters used for modifiying the copy. Use NULL for a missing property list</DD>
</DL>

<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>

<h4>Description</h4>

<DL> 
  <DD> Does a blit from the source image to a destination image using either a 
    destination quad or rectangle, a source rectangle and various ink parameters. 
    This method provides the same functionality as the lingo image.copyPixels 
    command. The property list can contain the following items:<br>
    <br>
    <span class="code">#color</span> - lingo color object<br>
    <span class="code">#bgColor</span> - lingo color object<br>
    <span class="code">#ink</span> - lingo ink value<br>
    <span class="code">#blendLevel</span> - lingo blend value<br>
    <span class="code">#dither</span> - non-zero value to dither, zero to not dither<br>
    <span class="code">#useFastQuads</span> - non-zero value to use fast quads in quad mode<br>
    <span class="code">#maskImage</span> - lingo mask image object for masking<br>
    <span class="code">#maskOffset</span> - lingo point for mask offset.<BR>
  
</DL>

<hr width=45% align=left>

<h3><A NAME="Crop">Crop()</A></h3>

<h4>Syntax</h4>

<DL> 
  <DT> 
  <span class="code">Crop(ConstPMoaMmValue <I>pSourceImage</I>, ConstPMoaMmValue <I>pRect</I>, PMoaMmValue <I>pResultImage</I>) 
  </span> </DL>

<h4>Parameters</h4>

<DL>
  <DT><span class="code"><i>pSourceImage</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains the source image object</DD>
  <DT><span class="code"><i>pRect</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains the rectangle to use for cropping.</DD>
  <DT><span class="code"><i>pResultImage</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that will receive the new cropped image object</DD>
</DL>

<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>

<h4>Description</h4>

<DL> 
  <DD> Creates a cropped image based upon an image object and a rectangle.<br>
 
</DL>

<hr width=45% align=left>

<h3><A NAME="Draw">Draw()</A></h3>

<h4>Syntax</h4>

<DL> 
  <DT> 
  <span class="code">Draw(ConstPMoaMmValue <I>pImage</I>, ConstPMoaMmValue <I>pRect</I>, ConstPMoaMmValue <I>pPropList</I>) 
  </span> </DL>

<h4>Parameters</h4>

<DL>
  <DT><span class="code"><i>pImage</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains the image object</DD>
  <DT><span class="code"><i>pRect</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains the rectangle to use for drawing.</DD>
  <DT><span class="code"><i>pPropList</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains a property list with various 
    parameters used for modifiying the drawing. Use NULL for a missing property list</DD>
</DL>

<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>

<h4>Description</h4>

<DL> 
  <DD> Performs a drawing operation on a lingo image object. The property list can contain the following items:<br>
    <br>
    <span class="code">#color</span> - lingo color object<br>
    <span class="code">#lineSize</span> - line width<br>
    <span class="code">#shapeType</span> - #rect, #roundRect, #oval, #line<br>
<br>
  
</DL>

<hr width=45% align=left>

<h3><A NAME="Fill">Fill()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">Fill(ConstPMoaMmValue <I>pImage</I>, ConstPMoaMmValue <I>pRect</I>, ConstPMoaMmValue <I>pPropList</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT><span class="code"><i>pImage</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains the image object</DD>
  <DT><span class="code"><i>pRect</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains the rectangle to use for drawing.</DD>
  <DT><span class="code"><i>pPropList</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains a property list with various 
    parameters used for modifiying the drawing. 
    Use NULL for a missing property list</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD>Performs a drawing operation with a filled shape on a lingo image object. The property list can contain the following items:<br>
    <br>
    <span class="code">#color</span> - lingo color object<br>
    <span class="code">#bgColor</span> - lingo color object<br>
    <span class="code">#lineSize</span> - line width<br>
    <span class="code">#shapeType</span> - #rect, #roundRect, #oval, #line</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="CreateMatte">CreateMatte()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">CreateMatte(ConstPMoaMmValue <I>pSourceImage</I>, PMoaMmValue <I>pResultImage</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT><span class="code"><i>pSourceImage</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains the source image object</DD>
  <DT><span class="code"><i>pResultImage</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that will receive the new destination 
    image object with the matte</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD>Creates a matte image based upon the source image object.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="CreateMask">CreateMask()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">CreateMask(ConstPMoaMmValue <I>pSourceImage</I>, PMoaMmValue <I>pResultImage</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT><span class="code"><i>pSourceImage</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that contains the source image object</DD>
  <DT><span class="code"><i>pResultImage</i></span></DT>
  <DD>Pointer to a <span class="code">MoaMmValue</span> that will receive the new destination 
    image object with the mask</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD> Creates a mask image based upon the source image object.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="TrimWhiteSpace">TrimWhiteSpace()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">TrimWhiteSpace(ConstPMoaMmValue <I>pSourceImage</I>, PMoaMmValue <I>pResultImage</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT><span class="code"><i>pSourceImage</i></span></DT>
  <DD>Pointer to a <span class="code">MmValue</span> that contains the source image object</DD>
  <DT><span class="code"><i>pResultImage</i></span></DT>
  <DD>Pointer to a <span class="code">MmValue</span> that will receive the new trimmed image object</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD>Creates a new image with trimmed white edges based upon an existing image object.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="SetAlpha">SetAlpha()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">SetAlpha(ConstPMoaMmValue <I>pImage</I>, ConstPMoaMmValue <I>pAlphaImageOrAlphaValue</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT><span class="code"><i>pImage</i></span></DT>
  <DD>Pointer to a <span class="code">MmValue</span> that contains the original image object 
    and will receive the alpha channel. This image must be 32 bit.</DD>
  <DT><span class="code"><i>pAlphaImageOrAlphaValue</i></span></DT>
  <DD>Pointer to a <span class="code">MmValue</span> that contains either a an integer or an 
    alpha channel image. The alpha channel image must be 8 bit.</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span></DD>
</DL>
<h4>Description</h4>
<DL> 
  <DD>For integer version, sets the alpha channel of an 32-bit image to a constant value.
  For image object version, inserts 8-bit image into the alpha channel of a 32-bit image.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="ExtractAlpha">ExtractAlpha()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT> 
  <span class="code">ExtractAlpha(ConstPMoaMmValue <I>pSourceImage</I>, ConstPMoaMmValue <I>pResultImage</I>)</span>
</DL>
<h4>Parameters</h4>
<DL>
  <DT><span class="code"><i>pSourceImage</i></span></DT>
  <DD>Pointer to a <span class="code">MmValue</span> that contains the source image object. 
    This image must be 32 bit.</DD>
  <DT><span class="code"><i>pResultImage</i></span></DT>
  <DD>Pointer to a <span class="code">MmValue</span> that will receive a new 8 bit image object.</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD> Creates a new image 8-bit grayscale image object that is only the alpha channel plane from 
  the existing image object, as long as the existing image object is a 32:8 image.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="GetPixel">GetPixel()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">GetPixel(ConstPMoaMmValue <I>pImage</I>, MoaLong <I>iXCoordinate</I>, MoaLong <I>iY</I>Coordinate, 
  <br>&nbsp;&nbsp;PMoaMmValue <I>pResultPixelValue</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT><span class="code"><i>pImage</i></span></DT>
  <DD>Pointer to a <span class="code">MmValue</span> that contains the image object</DD>
  <DT><span class="code"><i>iXCoordinate</i></span></DT> 
  <DD>Integer with the pixel's X coordinate</DD>
  <DT><span class="code"><i>iYCoordinate</i></span></DT>
  <DD>Integer with the pixel's Y coordinate</DD>
  <DT><span class="code"><i>pResultPixelValue</i></span></DT>
  <DD>Pointer to a <span class="code">MmValue</span> that will receive a color object value  for the pixel.</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span></DD>
</DL>
<h4>Description</h4>
<DL> 
  <DD> Finds the pixel value for a particular pixel location in a lingo image object. 
    This value is returned as a new color object.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="SetPixel">SetPixel()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">SetPixel(ConstPMoaMmValue <I>pImage</I>, MoaLong <I>iXCoordinate</I>, MoaLong <I>iY</I>Coordinate, 
  <br>&nbsp;&nbsp;ConstPMoaMmValue <I>pPixelValue</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT><span class="code"><i>pImage</i></span></DT>
  <DD>Pointer to a <span class="code">MmValue</span> that contains the image object</DD>
  <DT><span class="code"><i>iXCoordinate</i></span></DT>
  <DD>Integer with the pixel's X coordinate</DD>
  <DT><span class="code"><i>iYCoordinate</i></span></DT>
  <DD>Integer with the pixel's Y coordinate</DD>
  <DT><span class="code"><i>pPixelValue</i></span></DT>
  <DD>Pointer to a <span class="code">MmValue</span> that contains the new color object value to be used for the pixel.</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD> Sets a specific pixel in a lingo image object using the passed in color object.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="GetPixellnteger">GetPixellnteger()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">GetPixellnteger(ConstPMoaMmValue <I>pImage</I>, MoaLong <I>iXCoordinate</I>, MoaLong <I>iYCoordinate</I>, 
  <br>&nbsp;&nbsp;PMoaLong <I>pResultPixelValue</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT class="codearg">pImage</DT>
  <DD>Pointer to a <span class="code">MmValue</span> that contains the image object</DD>
  <DT class="codearg">iXCoordinate</DT> 
  <DD>Integer with the pixel's X coordinate</DD>
  <DT class="codearg">iYCoordinate</DT>
  <DD>Integer with the pixel's Y coordinate</DD>
  <DT class="codearg">pResultPixelValue</DT>
  <DD>Pointer to a <span class="code">MoaLong</span> that will receive an integer value for the pixel.</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD>Finds the pixel value for a particular pixel location in a lingo image object. 
  This value is returned as an integer.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="SetPixelInteger">SetPixelInteger()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">SetPixelInteger(ConstPMoaMmValue <I>pImage</I>, 
  MoaLong <I>iXCoordinate</I>,
  MoaLong <I>iYCoordinate</I>, 
  <br>&nbsp;&nbsp;MoaLong <I>iPixelValue</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT class="codearg">pImage</DT>
  <DD>Pointer to a <span class="code">MmValue</span> that contains the image object</DD>
  <DT class="codearg">iXCoordinate</DT> 
  <DD>Integer with the pixel's X coordinate</DD>
  <DT class="codearg">iYCoordinate</DT>
  <DD>Integer with the pixel's Y coordinate</DD>
  <DT class="codearg">iPixelValue</DT>
  <DD>Integer with the new value to be used for the pixel.</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD>Sets a specific pixel in a lingo image object using the passed in integer.</DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="LockPixels">LockPixels()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">LockPixels(ConstPMoaMmValue <I>pImage</I>, PMoaVoid * <I>ppPixels</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT class="codearg">pSourceImage</DT>
  <DD>Pointer to a <span class="code">MmValue</span> that contains the image object</DD>
  <DT class="codearg">ppPixels</DT>
  <DD>Pointer to a location that will receive the pointer to the pixels.</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span>
</DL>
<h4>Description</h4>
<DL> 
  <DD>Given a lingo image object, locks down an image handle and returns a pixel 
    pointer. Must be matched with a later call to <span class="code">UnlockPixels</span></DD>
</DL>

<hr width=45% align=left>

<h3><A NAME="UnlockPixels">UnlockPixels()</A></h3>
<h4>Syntax</h4>
<DL> 
  <DT class="code">UnlockPixels(ConstPMoaMmValue <I>pImage</I>)</DT>
</DL>
<h4>Parameters</h4>
<DL>
  <DT class="codearg">pSourceImage</DT>
  <DD>Pointer to a <span class="code">MmValue</span> that contains the image object which had a previous call to
  <span class="code">LockPixels</span>.</DD>
</DL>
<h4>Returns</h4>
<DL>
<DD><span class="code">MoaError</span></DD>
</DL>
<h4>Description</h4>
<DL> 
  <DD>Given a lingo image object with previously locked pixels, unlocks an image handle.
  Must be matched with a previous call to <span class="code">LockPixels</span></DD>
</DL>

<hr width=45% align=left>
<A HREF = "../copyrite.htm">Copyright &#169; 1995-2008 Adobe Macromedia Software LLC, Inc.</A>
</BODY>
</html>
