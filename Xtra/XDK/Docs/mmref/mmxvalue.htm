<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>IMoaMmXValue</title><link href="../xdk.css" rel="stylesheet" type="text/css"></head><body><A HREF="../mmdg/index.htm">MM Developer's Guide</A><BR><A HREF="index.htm" >MM Interfaces</A> | <A HREF="mmmthndx.htm" >MM Methods</A> | <A HREF="mmtypndx.htm">MM Types and Misc API</A><BR><hr width=45% align=left><h3><A name = "IMoaMmXValue"></A>IMoaMmXValue</h3>Interface ID: <span class="code">IID_IMoaMmXValue</span><BR>Pointer type: <span class="code">PIMoaMmXValue</span><BR>Inheritance: <span class="code">IMoaUnknown</span><BR>Header file: <A HREF = "../../include/mmixval.h">mmixval.h</A><BR><DL><DT class="heading4">Description</DT><DD>The IMoaMmXValue methods provide a way for an Xtra to implement its own extended values that can support indexed referencing and their own properties. For example, this interface is implemented by the Shockwave 3D Asset to provide some of the attributes of a 3D member.Also, the Flash Asset Xtra implements this interface to define wrapper values for flash objects so that lingo or javascript can use flash objects directly. You can use the <a href="mmxvalueutils.htm">IMoaMmXValueUtils</a> interface to create a MoaMmValue for one these wrapper objects. </DD></DL><h4>Methods</h4><DL><DD></DD><DT class="heading5">Basic Property Access Methods</DT><DD>The following methods provide basic property access such as getting and setting properties and index properties. Support is provided for calling custom methods for the xvalue. Also, some basic conversion routines are defined. </DD><DD><A HREF = "#GetProp">GetProp()</A><BR><A HREF = "#SetProp">SetProp()</A><br><A HREF = "#CallHandler">CallHandler()</A><br><A HREF = "#Ilk">Ilk()</A><br><A HREF = "#StringRep">StringRep()</A><br><A HREF = "#SymbolRep">SymbolRep()</A><br><A HREF = "#SetData">SetData()</A><br></DD><DT class="heading5">Methods Reserved for Future Use </DT><DD>The following methods are part of this interface for historical reasons, but are not called at this time.</DD><DD><A HREF = "#GetCount">GetCount()</A><BR><A HREF = "#AccessPropRef">AccessPropRef()</A><BR><A HREF = "#GetContents">GetContents()</A><BR><A HREF = "#SetContents">SetContents()</A><BR><A HREF = "#SetContentsBefore">SetContentsBefore()</A><BR><A HREF = "#SetContentsAfter">SetContentsAfter()</A><BR><A HREF = "#IntegerRep">IntegerRep()</A><br><A HREF = "#StreamOut">StreamOut()</A><br><A HREF = "#StreamIn">StreamIn()</A><br><A HREF = "#GetPropCount">GetPropCount()</A><BR><A HREF = "#GetPropDescriptionByIndex">GetPropDescriptionByIndex()</A></DD><DT class="heading5">Constants and Structures Reserved for Future Use</DT><DD><pre class="code">enum{  kMoaMmValueRange_None = 0,  kMoaMmValueRange_Min,  kMoaMmValueRange_Max,  kMoaMmValueRange_MinMax,  kMoaMmValueRange_List};typedef MoaLong MoaMmValueRangeType;#define kMaxPropDescription 128typedef struct MoaMmValueDesc{  MoaMmSymbol          name;  MoaMmValueType       type;  MoaMmValue           defaultVal;  MoaChar              pDescription[ kMaxPropDescription ];  MoaMmValueRangeType  range;  MoaMmValue           rangeValue1;  MoaMmValue           rangeValue2;} MoaMmValueDescription, *PMoaMmValueDescription;</pre></DD></DL><hr width=45% align=left><h4><A name = "GetProp">GetProp()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">GetProp(ConstPMoaMmValue <em>selfRef</em>, MoaMmSymbol <em>propName</em>, MoaLong <em>indexCount</em>, </DT><DD class="code">ConstPMoaMmValue <em>pIndexValues</em>, PMoaMmValue <em>pResult</em>)</DD></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>selfRef</em></DT><DD>The property reference object, as a lingo value. Assign to <span class="code"><em>pResult</em></span> and <span class="code">AddRef</span> to return the same property reference. Use to support properties that are further references as opposed to final values.</DD><DT class="code"><em>propName</em></DT><DD>Symbol specifying which property should be looked up.</DD><DT class="code"><em>indexCount</em></DT><DD>Number of indices - zero, one or two</DD><DT class="code"><em>pIndexValues</em></DT><DD>Array of indices.</DD><DT class="code"><em>pResult</em></DT><DD>Return value.</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_PropertyNotFound</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>The property is not found.</TD></TR><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>The specified style of property access not support.</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>This method retrieves the value of a property. A property name, and optionally, index values may be specified.</DD></DL><DL><DT class="heading5">Example</DT><DD>Example Calling Sequence:<pre class="code">put x.foo--&gt; i.GetProp( propName=foo, indexCount=0 )put x.foo[10]--&gt; i.GetProp( propName=#foo, indexCount=1, pIndexValues={10} )put x.foo[9..11]--&gt; i.GetProp( propName=#foo, indexCount=2, pIndexValues={9,11} )</pre></DD></DL><hr width=45% align=left><h4><A name = "SetProp">SetProp()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">SetProp(MoaMmSymbol <em>propName</em>, MoaLong <em>indexCount</em>, ConstPMoaMmValue <em>pIndexValues</em>, </DT><DD class="code">ConstPMoaMmValue <em>pNewValue</em>)</DD></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>propName</em></DT><DD>Symbol specifying which property should be looked up.</DD><DT class="code"><em>indexCount</em></DT><DD>Number of indices - zero, one or two</DD><DT class="code"><em>pIndexValues</em></DT><DD>Array of indices.</DD><DT class="code"><em>pNewValue</em></DT><DD>New value to assign.</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_PropertyNotFound</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>The property is not found.</TD></TR><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>The specified style of property access is not supported. for example, return this if you don't support indexCount &gt; 0.</TD></TR><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_CannotSetProperty</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>Set not allowed on specified property.</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>SetProp assigns a value to a property, or range with in a property. A property name, and optionally, index values may be specified.</DD></DL><DL><DT class="heading5">Example</DT><DD>Example Calling Sequence:<pre class="code">x.foo = 99--&gt; i.SetProp( propName=foo, indexCount=0, pNewValue=99 )x.foo[10] = 99--&gt; i.GetProp( propName=#foo, indexCount=1, pIndexValues={10}, pNewValue=99 )x.foo[9..11] = 123--&gt; i.GetProp( propName=#foo, indexCount=2, pIndexValues={9,11}, pNewValue=123 )</pre></DD></DL><hr width=45% align=left><h4><A name = "CallHandler">CallHandler()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">CallHandler(PMoaMmCallInfo <em>callPtr</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>callPtr</em></DT><DD>Pointer to a MoaMmCallInfo structure.</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_FunctionNotFound</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>If  do not support the method call.</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>This method lets you implement what your Xtra does when it is used as a Lingo handler. The <span class="code">callPtr</span> parameter references the same <a href="mmtypndx.htm#MoaMmCallInfo">structure</a> used for scripting xtra method calls. The specific handler being called is indicated by the <span class="code">callPtr-&gt;methodSelector</span> value. </DD></DL><DL><DT class="heading5">Examples</DT><DD><pre class="code">x.goDown(99)--&gt; CallHandler( callPtr-&gt;nargs=2, args={instance, 99} )</pre></DD></DL><hr width=45% align=left><h4><A name = "Ilk">Ilk()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">Ilk(PMoaMmValue <em>pArgument</em>, PMoaMmValue <em>pResult</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>pArgument</em></DT><DD>This is NULL in all cases i have been able to find so . </DD><DT class="code"><em>pResult</em></DT><DD>Place to store a symbol value that indicates what type of XValue this object is.</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT></DL><DL><DT class="heading5">Description</DT><DD>This method is used by the lingo and Javascript runtime engines to differentiate between different types of XValue objects. You need to choose a unique symbol value to represent your type of XValue.</DD></DL><hr width=45% align=left><h4><A name = "StringRep">StringRep()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">StringRep(PMoaMmValue <em>pStringVal</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>pStringVal</em></DT><DD>Place to store a string value that describes this type of XValue object.</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT></DL><DL><DT class="heading5">Description</DT><DD>This method is used to get a string representation of the XValue object. This method can provide a full, detailed conversion to a string, or just return a basic string that indicates what type the XValue object is.</DD></DL><hr width=45% align=left><h4><A name = "SymbolRep">SymbolRep()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">SymbolRep(PMoaMmSymbol <em>pSymbol</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>pSymbol</em></DT><DD>Place to store a symbol value that indicates what type of XValue this object is.</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT></DL><DL><DT class="heading5">Description</DT><DD>This method normally returns the same symbol that is used in figuring the result of the <span class="code"><a href="#Ilk">Ilk</a></span> method. </DD></DL><hr width=45% align=left><h4><A name = "SetData">SetData()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">SetData(PMoaVoid <em>pDatum</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>pDatum</em></DT><DD>A pointer to any type of memory structure that is needed.</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_FunctionNotFound</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>If you do not support this method.</TD></TR><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">&nbsp;</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>Any other errors as appropriate</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>This method is not called by Director. It  provides a convenient for you to initialize the XValue object with what ever data is needed. For example, if your XValue object is created by a sprite, the sprite code can use this method to pass in appropriate initialization data to a newly created XValue object. </DD></DL><hr width=45% align=left><h4>Methods listed below  are reserved for future use.</h4><hr width=45% align=left><h4><A name = "GetContents">GetContents()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">GetContents(ConstPMoaMmValue <em>selfRef</em>, PMoaMmValue <em>pResult</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>selfRef</em></DT><DD>--</DD><DT class="code"><em>pResult</em></DT><DD>--</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>&nbsp;</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>Reserved for future use.</DD></DL><hr width=45% align=left><h4><A name = "SetContents">SetContents()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">SetContents(PMoaMmValue <em>pNewValue</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>pNewValue</em></DT><DD>--</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>&nbsp;</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>Reserved for future use.</DD></DL><hr width=45% align=left><h4><A name = "GetPropCount">GetPropCount()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">GetPropCount(PMoaLong <em>pCount</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>pCount</em></DT><DD>Pointer to a <span class="code">MoaLong</span> that will receive the number of properties.</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>&nbsp;</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>Reserved for future use.</DD></DL><hr width=45% align=left><h4><A name = "GetPropDescriptionByIndex">GetPropDescriptionByIndex()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">GetPropDescriptionByIndex(MoaLong <em>index</em>, PMoaMmValueDescription <em>pDescription</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>index</em></DT><DD>Index specifying which property the caller wants to know about.</DD><DT class="code"><em>pDescription</em></DT><DD>Pointer to a structure you fill out with information about the property.</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>&nbsp;</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>Reserved for future use.</DD></DL><hr width=45% align=left><h4><A name = "GetCount">GetCount()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">GetCount(MoaMmSymbol <em>propName</em>, PMoaLong <em>pCount</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>propName</em></DT><DD>Symbol specifying which property should be looked up.</DD><DT class="code"><em>pCount</em></DT><DD>Pointer to a <span class="code">MoaLong</span> that will receive the number of &quot;chunks&quot; associated with this property.</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>&nbsp;</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>Reserved for future use.</DD></DL><hr width=45% align=left><h4><A name = "AccessPropRef">AccessPropRef()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">AccessPropRef(ConstPMoaMmValue <em>selfRef</em>, MoaMmSymbol <em>propName</em>, MoaLong <em>indexCount</em>,</DT><DD class="code">ConstPMoaMmValue <em>pIndexValues</em>, PMoaMmValue <em>pResult</em>)</DD></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>selfRef</em></DT><DD>The property reference object, as a Lingo value. Assign to <em>pResult</em> and AddRef to return self.</DD><DT class="code"><em>propName</em></DT><DD>The property name to look up.</DD><DT class="code"><em>indexCount</em></DT><DD>The number of indices. Specify 0, 1, or 2.</DD><DT class="code"><em>pIndexValues</em></DT><DD>An array of indices</DD><DT class="code"><em>pResult</em></DT><DD>Optional return value. To return a new property reference Lingo object, use IMoaMmPropReferenceValue::PropReferenceToValue.</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_PropertyNotFound</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>The property is not found.</TD></TR><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>If your Xtra does not support cascaded property access, return this.</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>This method sets up a reference to a set of hierarchical properties.A property name and (optionally) index values may be specified.A cascaded index property reference series will begin and continue with <span class="code">AccessPropRef</span> calls, up to the last access which will be any of <span class="code">GetProp, SetProp, SetContents, SetBefore</span>, or <span class="code">SetAfter</span>.</DD></DL><DL><DT class="heading5">Examples</DT><DD><pre class="code">put x.sel[33].foo--&gt; i.AccessProp(propName=#sel, indexCount=1, pIndexValues={33} )--&gt; i.GetProp( propName=foo, indexCount=0 )put x.sel[33].foo[10]--&gt; i.AccessProp(propName=#sel, indexCount=1, pIndexValues={33} )--&gt; i.GetProp( propName=#foo, indexCount=1, pIndexValues={10} )set x.sel[33].foo[9..11] = &quot;Done!&quot;--&gt; i.AccessProp(propName=#sel, indexCount=1, pIndexValues={33} )--&gt; i.SetProp( propName=#foo, indexCount=2, pIndexValues={9,11}, pNewValue=&quot;Done!&quot; )</pre></DD></DL><hr width=45% align=left><h4><A name = "SetContentsBefore">SetContentsBefore()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">SetContentsBefore(PMoaMmValue <em>pNewValue</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>pNewValue</em></DT><DD>--</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>&nbsp;</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>Reserved for future use.</DD></DL><hr width=45% align=left><h4><A name = "SetContentsAfter">SetContentsAfter()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">SetContentsAfter(PMoaMmValue <em>pNewValue</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>pNewValue</em></DT><DD>--</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>&nbsp;</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>Reserved for future use.</DD></DL><hr width=45% align=left><h4><A name = "IntegerRep">IntegerRep()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">IntegerRep(PMoaLong <em>pIntVal</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>pIntVal</em></DT><DD>--</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>&nbsp;</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>Reserved for future use.</DD></DL><hr width=45% align=left><h4><A name = "StreamOut">StreamOut()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">StreamOut(PIMoaStream2 <em>pStream</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>pStream</em></DT><DD>--</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>&nbsp;</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>Reserved for future use.</DD></DL><hr width=45% align=left><h4><A name = "StreamIn">StreamIn()</A></h4><DL><DT class="heading5">Syntax</DT><DT class="code">StreamIn(PIMoaStream2 <em>pStream</em>)</DT></DL><DL><DT class="heading5">Parameters</DT><DT class="code"><em>pStream</em></DT><DD>--</DD></DL><DL><DT class="heading5">Returns</DT><DT class="code">MoaError</DT><DD><br><TABLE BORDER="2"><TR><TD WIDTH=240 ALIGN="LEFT" VALIGN="TOP" class="code">kMoaMmErr_AccessNotSupported</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=493>&nbsp;</TD></TR></TABLE></DD></DL><DL><DT class="heading5">Description</DT><DD>Reserved for future use.</DD></DL><hr width=45% align=left><A HREF="../copyrite.htm" >Copyright &#169; 2004-2007 Adobe Macromedia Software LLC, Inc.</A></body></html>