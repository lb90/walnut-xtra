<HTML><HEAD><TITLE>Director 11.5 XDK Readme</TITLE><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><style type="text/css"><!--body,td,th {	font-family: Verdana, Arial, Helvetica, sans-serif;	font-size: small;}body {	background-color:#FFFFFF;}.code {	font-family: monospace;	font-weight: normal;	font-size: small;}.path {	font-family: monospace;	font-size: small;	font-weight: bold;}--></style></HEAD><BODY><HR width=45% align=left><H3>Director 11.5 XDK Readme</H3><HR width=45% align=left><h4><A NAME="RTFToC1">Introduction</A></h4><P>This release of the Xtra Development Kit (XDK) is for use in developing Xtras for Adobe Director 11. The Macintosh XDK has been updated to support Mach-O universal binary Xtras and the Xcode development environment. The XDK has been updated for the latest release of Director and does not support building Xtras that run on older Director versions.A complete list of all additions and changes made since the Director MX 2004 XDK can be found in the <a href="Docs/updates.htm">XDK updates</a> file.</P><P>This XDK provides resources for developing extensions to Director, including Sprite Xtras, Transition Xtras, Scripting Xtras, Filter Xtras and Tool Xtras. <a href="Docs/index.htm">Documentation</a> files in HTML format and several example Xtras are provided as part of this release. A descriptive index of the example Xtras is provided in <a href="Examples/examples.htm">XDK Examples</a> document.</P><hr width=45% align=left><h5>Table of folders included in the XDK</h5><TABLE BORDER="2">    <TR>      <TD width="91">Docs</TD>      <TD width="579">Director XDK documentation.</TD>  </TR>    <TR>      <TD>Examples</TD>      <TD>Project and source files for several examples; some include sample movies as well.</TD>    </TR>    <TR>      <TD>Include</TD>      <TD>Header files required for Xtra development</TD>    </TR>    <TR>      <TD>Lib</TD>      <TD>The XSupport code library. This is used in some of the examples.</TD>    </TR>    <TR>      <TD>readme.htm</TD>      <TD>This file.</TD>    </TR>    <TR>      <TD>XDKXtras</TD>      <TD>Pre-built versions of the example Xtras</TD>    </TR></TABLE><hr width=45% align=left><h4><a name="DevEnvironment">Xtra</a> Development Environments</h4><hr width=45% align=left><h5>Windows</h5><p>The compiler currently supported for developing Xtras for Windows is Microsoft Visual C++ version 7.0 (MSVC 2003). The workspace files are now in VC7 format.<br><br>To build an example Xtra, open one of the example .sln files in Microsoft Visual C++ (e.g. <span class="path">XDK\Examples\Sprite\Oval\winproj\Oval.sln</span>). Choose <span class="code">Build Solution</span> from the <span class="code">Build</span> menu. The compiler will create the <span class="path">Oval.x32</span> shared library in the <span class="path">XDK\Examples\debug\</span> directory. If you set the project to make a Release version, the compiled Xtra will be put in <span class="path">XDK\Examples\release\</span>.<br><br>To make an Xtra that uses MFC you will need to modify the file <span class="path">include\win32\moatyedg.h</span>. Add an <span class="code">#ifndef _USRDLL</span> around the <span class="code">DllMain()</span> function in the <span class="code">_MOA_XCODE_PREFACE</span> section to disable it if <span class="code">_USRDLL</span> is defined (this is a standard MFC #define). So the <span class="code">_MOA_XCODE_PREFACE</span> is reduced to just declaring <span class="code">gXtraFileRef</span> if you're using MFC. MFC developers also need to set the value of <span class="code">gXtraFileRef</span> somewhere else.You may want to do this in an early <span class="code">MoaCreate()</span> call like so:<br><span class="code">gXtraFileRef = AfxGetInstanceHandle();</span></p><h5>Debugging Windows Xtras</h5><ol>  <li>Open Visual C++ and build the Debug target for the project, as described above (i.e. the Oval project). </li>  <li>Copy a shortcut to the Debug version of the Xtra (i.e. <span class="path">XDK\Examples\debug\OvalSprite.x32</span>) into   the <br><span class="path">C:\Program Files\Adobe\Adobe Director 11\Configuration\Xtras\</span> folder.</li>  <li>In Visual C++, shoose the <span class="code">Properties</span> item from the <span class="code">Project</span> menu.</li>  <li>Select the <span class="code">Debugging</span> item in the left panel.</li>  <li>Use the <span class="code">Browse...</span> item for the <span class="code">Command</span> text field to fill in the path to Director (or a projector).   For example, <br>  <span class="path">C:\Program Files\Adobe\Adobe Director 11\Director.exe</span></li>  <li>Set breakpoint(s) in one of your source files.</li>  <li>Choose <span class="code">Start</span> from the <span class="code">Debug</span> menu.</li></ol><hr width=45% align=left><h5>Macintosh</h5><p>This version of the XDK has been updated to support Xtra development using Apple Computer Inc's Xcode, and the Mach-O object format.The XDK supports Universal Binary format or processor specific xtras.There is not a way to use older CFM xtras with Mach-O executables, or to use the Mach-O xtras with the older CFM executables.The Mach-O xtra format is a Bundle.Xtra bundles can still store resources in resource files;  all of the Adobe Example Xtras are using data fork resource files for this purpose.</p><p>The new Xtra projects have been setup for development with Xcode version 2.4 and later.The minimum required operating system is 10.4.</p><p>When porting xtras to the Intel Processor macintosh, the most common area that needed attention was the format of data such as castmember data.Older xtras assumed Windows was the same as <span class="code">__LITTLE_ENDIAN__</span> and Macintosh was the same as <span class="code">__BIG_ENDIAN__</span>.Since xtra castmember file data needs to be stored in a common format with both bit storage approaches, translation is needed for some data types.Each of the sample xtras in the XDK that write out some castmember data needed to have a small code change to deal with this issue.</p><p>To build an example Xtra, open one of the example .xcodeproj files in Xcode (e.g. <span class="path">XDK/Examples/Sprite/Oval/macproj/OvalSprite.xcodeproj</span>). Choose Build from the Build menu. The compiler will create the <span class="path">OvalSprite.xtra</span> bundle in the <span class="path">XDK/Examples/build/Release/</span> directory. If you set the project to make a debug version, a debug version of the compiled Xtra will be put in <span class="path">XDK/Examples/build/Debug/</span>.</p><p>The Macintosh example projects have been setup with <span class="path">xcconfig</span> files controlling the project settings. Each project has a Debug and Release configuration defined - the Release project builds a Universal binary with both ppc and i386 architectures.To change the name of the Macintosh Xtra that will be built by a project, edit the <span class="path">common.xcconfig</span> file for the project and change the value assigned to <span class="code">PRODUCT_NAME</span>.Ths value gets used by the linker and also gets stored in the <span class="path">info.plist</span> file for the Xtra bundle.</p><h5>Debugging Macintosh Xtras</h5><ol>  <li>Open Xcode and build the Debug target for the project, as described above (i.e. the OvalSprite project). </li>  <li>Create an alias to  the Debug version of the Xtra (i.e. <span class="path">XDK/Examples/build/Debug/OvalSprite.xtra</span> and   copy it into the <span class="path">/Applications/Adobe Director 11/Configuration/Xtras/</span> folder.  For Shockwave debugging you can put the alias here:   <span class="path">~/Application Support/Adobe/Shockwave Player 11/Xtras/</span></li>  <li>In Xcode, choose <span class="code">New Custom Executable...</span> from the <span class="code">Project</span> menu.</li>  <li>Use the <span class="code">Choose</span> button to browse the file system and fill in the path to Director   (or a projector or Safari) in the <span class="code">Executable Path</span> text field.</li>  <li>Debugging Tip:  Use the <span class="code">Debug/Tools/Shared Libraries...</span> menu item and set the   <span class="code">User Libraries</span> pop-up to <span class="code">All</span>.  This will ensure that your debug information gets loaded when the application is launched.  You may need clear all items from the <span class="code">Module</span> list if it has stale information.</li>  <li>Set breakpoint(s) in one of your source files.</li>  <li>From the <span class="code">Debug</span> menu, choose <span class="code">Debug Executable</span>.</li>  <li>Director will launch, and your breakpoint should get hit. </li>  <li>Debugging Tip: With Xcode, when the host application does not have debugging code,   stepping over function calls in your xtra sometimes just does not work.   You may end up looking at some assembly language code instead of being on the next line of your source.  You may have better luck by adding a temporary breakpoint on the next line of code you want to stop at.</li></ol><hr width=45% align=left><h4>Xtra Developers Support</h4><P> This XDK is provided as is, without support from Adobe.</P>  <h5>Additional Sources of Information</h5><P> - General MOA information is in &quot;MOA Development Issues&quot; the <a href="Docs/moadg/index.htm"> MOA Developer's Guide.</a><BR>  - Useful tips are in <a href="Docs/moadg/moadgtg.htm">&quot;Tips, Guidelines, and Gotchas&quot;</a>   in the Multimedia Developer's Guide.<BR>- For the latest news, online docs, and FAQs about Xtras, surf to the Xtra Developers Center at <A HREF="http://www.adobe.com/support/xtras" >http://www.adobe.com/support/xtras</A>.</P><HR width=45% align=left><A HREF="Docs/copyrite.htm">Copyright &#169; 1999-2008, Adobe Macromedia Software LLC, Inc.</A></BODY></HTML>