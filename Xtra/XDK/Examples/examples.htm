<!-- saved from url=(0013)about:internet --><html><head><title>XDK Examples</title><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>IMoaMmXValue</title><link href="../Docs/xdk.css" rel="stylesheet" type="text/css"></head><BODY><hr align="LEFT" width="45%"><h3>Xtra Developer Kit Examples</h3><hr align="LEFT" width="45%"><a name="Examples" class="heading4">About the Examples Folder </a><P> This XDK comes with skeleton (template) projects in the Examples folder for   Interrogator, Transition, Sprite, Scripting, Filter, and Tool Xtras.   These templates include projects for Visual C++ and Xcode.  The skeleton projects contain source with comments that briefly describe modifications to make to create your Xtra.   All of the sample movies have been updated to D11 format.   Older versions of the movies can be found in older XDKs posted on the Adobe Exchange.  The Xcode projects are setup to build universal binary targets - for both Intel and PPC processors.  Note that xtras built with Xcode will not work with Director MX 2004 since they are Mach-O format rather than CFM format.</P>  <p>There are also a number of working example projects that demonstrate various coding features described in this documentation.   An alternate way to begin Xtra development is to start with a working example that implements many of the features   you plan to provide, and modify it to include your code.  This release of the XDK includes a folder called XDKXtras which contains prebuilt version of the example xtras   that are included in the kit.  All of the projects have now been setup to place their output into a common folder.  There is also an "AllExamples" master project that can be used to build all of the examples.  <BR>  <br>  <B>IMPORTANT: </B>You may freely change source files in the example projects.   However, take care in modifying any project settings. These projects provide a number of standard settings required to make Xtras work correctly.</p><P>For information about development environments, please see the <a href="../readme.htm">readme</a>   file that comes with the XDK.<h4 class="heading4">Xtra Syntax</h4>  <p>The examples include a variety of different coding styles to implement Xtras:</p>  <ul>    <li>X_ENTER, X_EXIT, X_RETURN macros: are used to bracket methods in most of the examples (Greeting, EventTest, InkTest, Beep, and TallWide). 	This method has been used in previous versions of the XDK. 	It was required when the XDK supported 68K and Win31, and was useful for  C/C++ development.</li>    <li>Normal C++ Style syntax: This is a simpler standard C++ style method syntax can be used. 	The &quot;DrAccess&quot;, &quot;Oval&quot; and all Skeleton examples are written this way. 	</li>    <li>MoaTry/MoaCatch exception handling: The &quot;PlaySound&quot; example demonstrates this new method for exception handling. 	Using moa_try and moa_catch blocks may simplify syntax by automagically checking the return values on your Moa calls. 	Any error gets thrown to a predefined moa_catch block.     See the &quot;moa_try.h&quot; include file for more info.</li>    <li>XSupport exception handling: An even more powerful exception handling scheme, used by the &quot;Wacky Dialog&quot; example. 	See the example for details.</li>  </ul>  <H4><FONT face=arial,helvetica,sans-serif>Creating GUIDs</FONT></H4>  <P> To create globally unique identifiers (GUIDs) for the classes you define in   an Xtra, you can  use the Windows application <span class="codearg">GenUID.EXE</span>, which is provided   with the Microsoft Visual C++ development environment.   For Macintosh OSX, just use the <span class="codearg">uuidgen</span> command in the terminal window.  Copy the GUID created by the utility into the class header file.   You need to create a new GUID for each class in a project.   Tip: After copying, be sure to correctly redefine the class that existed in the same line the GUID line is on.<hr align="LEFT" width="45%"><h3>Description of Examples</h3><hr align="LEFT" width="45%"><span class="heading4">Filter</span><ul>  <li><b>TileFilter:</b> <a name="TileFilter"></a>A basic filter example to demonstrate the new sprite filter interface</li>   <li>this filter displays a sprite as a series of tiled thumbnail images</li>   <li>there is a VDL file that can be put in the /Configuration/Props/Filters folder to provide a UI for the filter properties</li>   <li>this xtra is safe for shockwave</li>   <li>a Movie - &quot;tile_filter_test.dir&quot; - is provided to demonstrate the filter in operation </li>  <li>The TileFilter example is safe for shockwave and there is an HTML wrapper for the test movie</li>   <li>- </li>  <li><b>Skeleton:</b> Template project for a filter xtra</li></ul><span class="heading4">Interrogate</span><ul>  <li><b>Greeting:</b> Shows how to implement the <a href="../Docs/mmref/mmintrrg.htm">Interrogate/Terminate</a>     interfaces which allow you to implement functionality at Director startup     and shutdown times. When this xtra is is available a greeting dialog is presented     during Director startup.</lI>    <li>- </li>  <li><b>Skeleton:</b> Template project </ul><span class="heading4">Script</span><ul>  <li><b>DrAccess: <a name="DrAccess"></a></b>Implements global and instance level Lingo commands. Uses several callbacks     and interfaces, including Director Player, Movie, Cast and Score access.</li>  <li>The DrAccess Xtra is NOT &quot;safe for shockwave&quot; so it will not run in a browser</li>  <li>Recent changes:</li>  <li>- Use Macintosh GetWindowBounds call in <strong>dracscrp.cpp</strong> for Xcode development</li>  <li>- Change DrFixMediaHeader calls to be used on Intel macintosh as well as Windows machines in <strong>drmedfix.c</strong> and <strong>dracsrp.c</strong> </li>  <li>- Add error checking to XPly_ResolveFileName in <strong>dracscrp.cpp</strong> so it will behave properly if used to resolve a non-existant file</li>  <li>- Change XX_MoaFileWrite in <strong>dracscrp.cpp</strong> to generate full path to file since just using a simple name does not work in D11</li>  <li>- </li>  <li><b>Valuechecker</b>: A lingo script example. Shows how to access complex lingo datatypes within an xtra: lists,     points, rects, numbers. Shows receiving a list of values from lingo as well returning a list of values to lingo. This Xtra also uses the vector/value interface. Designed to run with the sample     movie.</li>  <li>The Valuechecker Xtra is safe for shockwave</li>  <li>This xtra has version information for windows and macintosh</li>  <li><b>Valuechecker.dir</b> is the companion Director movie</li>  <li>There is an HTML wrapper for the test movie</li>  <li>- </li>  <li><b>XArray<a name="XArray"></a>:</b> Shows how to add a new object type to lingo with   the <a href="../Docs/mmref/mmxvalue.htm">IMoaMmXValue</a> interface.   Creates a new <span class="code">XValue</span> object (in this example the object is an array) and shows how to do   property and handler access with the object.  Also demonstrates how to use the <span class="code">IMoaMmXValueUtils</span> conversion routines. </li>  <li><b>XArrayTest.dir</b> is the companion Director movie. It shows how to access all the properties and methods of the XArray   object in both lingo and Javascript </li>  <li>The XArray Xtra is safe for shockwave and there is an HTML wrapper for the test movie</li>  <li>- </li>  <li><b>Skeleton:</b> Template project for a script xtra</li>  <li>- </li>  <li><b>Skeleton2</b>: Alternate template project for a script xtra. </li>  <li>uses a .r file to specify version and xtra resources for the Macintosh</li>  <li>uses a .rc file to specify version info for the Windows OS</li>  <li>source files are less peppered with comments than the other template source</li>  <li>uses moatry/moacatch macros for exception handling</li>  <li> uses a single source and header file rather than the multiple files of the other skeleton projects</li>  <li> just assign a GUID for the project and you will be able to build and run a functioning script xtra</li></ul><span class="heading4">Sprite</span><ul>  <li><b>EventTest: </b>Spews Sprite events to the message window. Handy to familiarize yourself with the order of events     in a Sprite Xtra.</li>  <li><b>EventTest.dir</b> is the companion Director movie</li>  <li>There is an HTML wrapper for the test movie</li>  <li>The EventTest example is safe for shockwave</li>  <li>- </li>  <li><b>InkTest:</b> Uses the <a href="../Docs/mmref/mmgc2.htm#Blit2">Blit2</a> interface to blit to its own offscreen GC.     This enables the sprite to support new D7 features such as rotation and skewing, as well as the old Blit functionality     (for this example in particular the ability to set the inkmode of the sprite).</li>  <li><b>InkTest.dir</b> is the companion Director movie</li>  <li>There is an HTML wrapper for the test movie</li>  <li>The InkTest example is safe for shockwave</li>  <li>Recent changes:</li>  <li>- <strong>itasset.cpp</strong>: use QDGetPictureBounds call for intel Macintosh</li>  <li>- </li>  <li><b>Oval:</b> Basic Sprite / Asset Xtra example. </li>  <li>Also shows how to stream props and media to/from the Director movie, and shows how to use ForceMediaLoad and ForceMediaUnload     to load and unload asset media on demand. The media and props in this example are not real, they have been inserted for     demonstration purposes. </li>  <li><b>OvalSprite.dir</b> is the companion Director movie</li>  <li>There is an HTML wrapper for the test movie</li>  <li>This xtra has version information for windows and macintosh</li>  <li>The OvalSprite example is safe for shockwave</li>  <li>The OvalSprite asset supports the &quot;image&quot; property and returns an image object</li>  <li><b>oval.txt</b> defines a <a href="../Docs/drdg/vdlsyntax.htm">property inspector page</a> for this Xtra. Copy oval.txt     into Coniguration/Props/Member/ folder.</li>  <li>- </li>  <li><b>PlaySound: </b>Shows how to use the <a href="../Docs/drref/drsound.htm">IMoaDrSound</a> interface to implement a     simple sound player (supports AIFF, Wav, and SWA sounds). The type of sound is determined by the file extension (a more     robust implementation is recommended). Properties are not persistent. </li>  <li>The Xtra does not store the path and file name of the sound file in the cast member.   The example movie keeps this information in a script.</li>  <li><b>PlaySoundDemo.dir</b> is the companion Director movie</li>  <li>The PlaySound example uses Mix Services and the SWA Import Export Xtra in order to play the SWA sound.   Director relies on Mix Services and various other Sound xtras to be present in order to import and play the different sound formats   that it supports.</li>  <li>In order to reliably use <span class="code">IMoaDrCastMem::GetMedia</span>, <span class="code">IMoaDrCastMem::SetMedia</span>   and <span class="code">IMoaDrCastMem::AttachMedia</span> on sound cast   members, you need to have the following Xtras available:     <ul>      <li>Mix Services </li>      <li>Sound Import Export </li>      <li>any other sound Xtras (e.g. SWA Import Export, MPEG3 Import Export, etc.) that are required for the type of sound         media in the member. </li>    </ul>  </li>  <li><b>Important Note:</b> These Xtras are always available during authoring and they are automatically packaged up by default     in projectors. This needs to be considered for Shockwave movies and for projectors that are not created with the default     set of Xtras.</li> <li>- </li>  <li><b>Skeleton:</b> Template project for a sprite xtra</li>  <li>- </li>  <li><b>Wacky Dialog: </b>shows how to write an interdependent Sprite Asset and its author-time properties dialog. There     are two projects for this example. The Dialog Project creates the Xtra that implements the dialog box that appears at     author time. The Asset Project creates the sprite asset itself; it is active at author and playback time. Features for     this example:     <ul>      <li>Implements a complex MUI Dialog. </li>      <li>Separates runtime and UI Xtras for smaller Shockwave download (i.e. just the runtime component is needed to run         in Shockwave). </li>      <li>Uses the XSupport lib for many helper functions. </li>      <li>The runtime Asset xtra is marked safe for shockwave, the dialog xtra is not</li>      <li>Recent changes:</li>      <li>- <strong>asset.cpp</strong>: Change prop streaming to deal with byte swapping on Intel Macintosh.</li>      <li>- adjust Macintosh layout for checkboxes in <strong>dialog.cpp</strong> so they don't get clipped</li>    </ul>  </li>  <li>Once you've compiled the two Xtras, place them in Director's Xtras folder. Launch Director, and from the Insert menu,     select Sprite Examples > Wacky Dialog. The Wacky Dialog itself will appear and let you set the text that will appear within     the sprite. The purpose of the dialog box is to show how to create all the different kinds of dialog-box elements. Not     all of the controls actually do anything. </li>  <li>To show that the asset Xtra works independently of the dialog Xtra, remove Wacky Dialog from the Xtras folder and run     the movie. It works ... but you cannot change the asset's properties. Quit Director and remove Wacky Dialog Asset. Now     if you try to open the movie, you will get an alert stating that the required asset Xtra is missing. </li></ul><span class="heading4">Tool</span><ul>  <li><b>Beep:</b> demonstrates a basic Tool Xtra</li>  <li>- </li>  <li><b>ComputerUser:</b> <a name="ComputerUser"></a>Simple movie editing Tool    Xtra    <ul>    <li>new to the XDK this release</li>    <li>running the tool creates a new text member, populates it with text and adds a sprite to the score that uses the member</li>    <li>the code shows how to combine system specific Unicode strings and  text from Director</li>   <ul>   <li>the computer name and computer user name are obtained from the operating system</li>   <li>the move name and movie path are obtained from the movie</li>   </ul>   <li>this tool does not present any UI, but demonstrates creating both castmembers and score</li>   </ul>  </li>  <li>- </li>  <li><b>Skeleton:</b> Template project for a tool xtra</li></ul><span class="heading4">Transition</span><ul>  <li><b>Skeleton:</b> Template project for a transition xtra</li>  <li>- </li>  <li><b>TallWide:</b> Transition Xtra demo     <ul>      <li>also shows streaming of props into/out of Director movie</li>      <li>demonstrates a throttled animated thumbnail</li>      <li>uses a native property dialog and About box.</li>    </ul>  </li>  <li><b>tallwide.dir</b> is the companion Director movie</li>  <li>The TallWide example is safe for shockwave and there is an HTML wrapper for the test movie</li>  <li>In the transition dialog box, tallwide appears in the &quot;transition examples&quot; category</li>  <li>To adjust options using the Director UI click on the &quot;options&quot; button in the transition dialog box</li>  <li>Recent changes:</li>  <li>- <strong>twasset.cpp</strong>: Change prop streaming to deal with byte swapping on Intel Macintosh. </li>  <li>- Remove unused variables.</li></ul> <hr align="LEFT" width="45%"></body></html>